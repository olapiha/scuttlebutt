(*----------------------------------*)
(*Types															*)
(*----------------------------------*)

type hmac_key [large, fixed].
type hash_key [nonuniform, fixed].
type sym_key [large, fixed].
type nonce [bounded].
type Z [large, bounded].
type G [large, bounded].
type subG [large, bounded].
type D [fixed].
type prfout [bounded].
type message [bounded].
type seed [large, fixed].
type skey [bounded].
type pkey [bounded].

(*----------------------------------*)
(*Constants													*)
(*----------------------------------*)

param N1, N2.

channel c1, c2, c3, c4, c5, c6, c7, c8, c9, start, begin, finish.
const failmsg: bitstring.
const zero:sym_key.
const nonce0: nonce.
const empty_addata: bitstring.
const hkey: hash_key.

event ClientAccept(G).
event ServerAccept(G).
event ClientEndSession(G,hmac_key).
event ServerEndSession(G,hmac_key).
event ClientConfirmNetwork(hmac_key).
event ServerConfirmNetwork(hmac_key).
event Sentmessage(G, bitstring).
event Receivedmessage(G, bitstring).

(*----------------------------------*)
(*Primitives												*)
(*----------------------------------*)

(*Type conversions*)
fun G2bit(G): bitstring [typeConverter].
fun bit2G(bitstring):G     [typeConverter].
fun symkey2bit(sym_key): bitstring [typeConverter].
fun G2symkey(G): sym_key [typeConverter].


(*DH*)
expand DH_X25519(G, Z, g, exp, mult, subG, g_k, exp_div_k, exp_div_k', pow_k, subG2G, G_zero, sub_zero).

(*HMAC*)(*hmac function is modeled as a PRF *)
proba Pprf.
expand PRF(hmac_key, bitstring, prfout, hmac, Pprf).

(*We assume in this model that SHA256 is collision resistant and preimage resistant*)
proba Phash.
expand CollisionResistant_hash(hash_key, bitstring, bitstring, hash, hashoracle, Phash).

(*We assume in this model that SHA256 is collision resistant and preimage resistant*)
proba Phash2key.
expand CollisionResistant_hash(hash_key, bitstring, sym_key, hash2key, hash2keyoracle, Phash2key).

(*signatures*)
(*UF-CMA malleable probabilistic signature*)
proba Psign.
proba Psigncoll.
expand UF_CMA_proba_signature(seed, pkey, skey, bitstring, bitstring, skgen, pkgen, sign, check, Psign, Psigncoll).

(*secret box*)
proba Penc.
proba Pencctxt.
expand AEAD_nonce(sym_key, bitstring, bitstring, bitstring, nonce, secret_box, secret_box_open, injbot, zeroer, Penc, Pencctxt).




(*----------------------------------*)
(*Queries														*)
(*----------------------------------*)


query x:G, y:hmac_key; event (ServerEndSession(x, y)) ==> event(ClientConfirmNetwork(y)).
query x: G, y: hmac_key ; event(ClientEndSession(x, y)) ==> event(ServerAccept(x)) && event(ServerConfirmNetwork(y)).


(*----------------------------------*)
(*Principals												*)
(*----------------------------------*)

let Alice(skA:Z, signA: seed, signBpk: pkey, pkB:G, skInv: Z, N: hmac_key) =
  in(c9, m: bitstring);
  let pkA = exp(g, skA) in
  let pkInv = exp(g, skInv) in
  let signAsk = skgen(signA) in
  let signApk = pkgen(signA) in
	new ephemeral_skA: Z;
	let ephemeral_pkA = exp(g, ephemeral_skA) in
	let m1 = (ephemeral_pkA, hmac(N, G2bit(ephemeral_pkA))) in
	out(c1, m1);
	in(c2, (ephemeral_pkX:G, hmacX: prfout));
	if hmacX = hmac(N, G2bit(ephemeral_pkX)) then
  let key1 = exp(ephemeral_pkX, ephemeral_skA) in
  let key2 = exp(pkB, ephemeral_skA) in
  let secret1 = hash2key(hkey, (N, key1, key2)) in
  let sign_Inv = sign((N, pkB, hash(hkey, G2bit(key1))), signAsk) in
  let m3 = secret_box((sign_Inv, pkInv, signApk), empty_addata, secret1, nonce0) in
	out(c3, m3);
	in (c4, m4: bitstring);
	let key3 = exp(ephemeral_pkX, skInv) in
	let secret2 = hash2key(hkey, (N, key1, key2, key3)) in
	let injbot(sign_B: bitstring) = secret_box_open(m4, empty_addata, secret2, nonce0) in
  if check((N, sign_Inv, pkInv, hash(hkey ,G2bit(key1))), signBpk, sign_B) then
	event ClientEndSession(pkInv, N).

let Bob(skB:Z, signB: seed, N: hmac_key) =
	in(c5, (ephemeral_pkY:G, hmacY: prfout));
  let pkB = exp(g, skB) in
  let signBsk = skgen(signB) in
	if hmacY = hmac(N, G2bit(ephemeral_pkY)) then
	event ServerConfirmNetwork(N);
	new ephemeral_skB: Z;
	let ephemeral_pkB = exp(g, ephemeral_skB) in
	let m2 = (ephemeral_pkB, hmac(N, G2bit(ephemeral_pkB))) in
	out(c6, m2);
	in(c7, m3: bitstring);
	let key1 = exp(ephemeral_pkY, ephemeral_skB) in
	let key2 = exp(ephemeral_pkY, skB) in
	let secret1 = hash2key(hkey, (N, key1, key2)) in
	let injbot(tuple) = secret_box_open( m3, empty_addata, secret1, nonce0) in
  let (sign_Y: bitstring, pkY: G, signYpk: pkey) = tuple in
	if check((N, pkB, hash(hkey, G2bit(key1))), signYpk, sign_Y) then
	let key3 = exp(pkY, ephemeral_skB) in
	let secret2 = hash2key(hkey, (N, key1, key2, key3)) in
	let m4:bitstring = secret_box(sign((N, sign_Y, pkY, hash(hkey, G2bit(key1))), signBsk), empty_addata, secret2, nonce0) in
	event ServerAccept(pkY);
	out(c8, m4).

(*----------------------------------*)
(*Main process											*)
(*----------------------------------*)

process
	in(start, ());
  new initN: hmac_key;
  new signA: seed;
  new signB: seed;
  new skA: Z;
  new skB: Z;
  new skInv: Z;
  new mssg: message;
  out(begin, mssg);
	(! i <= N1 Alice(skA, signA, pkgen(signB), exp(g, skB), skInv, initN) |
	 (! i <= N2 Bob(skB, signB, initN) ))
