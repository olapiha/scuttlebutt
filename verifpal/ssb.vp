attacker[active]

// Setup phase

principal Alice[
    knows private longTermA
    generates ephemeralA
    longTermAPub = G^longTermA
    ephemeralAPub = G^ephemeralA
]

principal Bob[
    knows private longTermB
    generates ephemeralB
    longTermBPub = G^longTermB
    ephemeralBPub = G^ephemeralB
]

principal Directory[
    knows public n
]

Bob -> Directory: longTermBPub, longTermB, ephemeralB

Directory -> Alice: longTermBPub

// 1. Client Hello

principal Alice[
    nHmacAlice = HMAC(n, ephemeralAPub)
]

Alice -> Bob: ephemeralAPub, nHmacAlice

// 2. Server Hello

principal Bob[
    nHmacBob = HMAC(n, ephemeralBPub)
]

Bob -> Alice: ephemeralBPub, nHmacBob

// 3. Client Authenticate

principal Alice[
    ephemeralSecretAlice = G^ephemeralA^ephemeralBPub
    longTermSecretAlice = G^ephemeralA^longTermBPub
    masterSecret1Alice = HASH(n, ephemeralSecretAlice, longTermSecretAlice)
    sig1Alice = SIGN(longTermA, HASH(n, longTermBPub, ephemeralSecretAlice))
    secretBox1Alice = AEAD_ENC(masterSecret1Alice, sig1Alice, n)
    secretBox2Alice = AEAD_ENC(masterSecret1Alice, longTermAPub, n)
    longEphemeralSecretAlice = G^longTermA^ephemeralBPub
    masterSecret2Alice = HASH(n, ephemeralSecretAlice, longTermSecretAlice, longEphemeralSecretAlice)
]

//TODO: Concatentation
Alice -> Bob: secretBox1Alice, secretBox2Alice

principal Bob[
    ephemeralSecretBob = G^ephemeralB^ephemeralAPub
    longTermSecretBob = G^longTermB^ephemeralAPub
    masterSecret1Bob = HASH(n, ephemeralSecretBob, longTermSecretBob)
    sig1Bob = AEAD_DEC(masterSecret1Bob, secretBox1Alice, n)
    longTermAPub_Bob = AEAD_DEC(masterSecret1Bob, secretBox2Alice, n)
    sig1Valid = SIGNVERIF(longTermAPub_bob, HASH(n, longTermBPub, ephemeralSecretBob), sig1Bob)?
    longEphemeralSecretBob = G^ephemeralB^longTermAPub_Bob
]

// 4. Server Accept

principal Bob[
    sig2Bob = SIGN(longTermB, HASH(n, sig1Bob, longTermAPub_Bob, ephemeralSecretBob))
    masterSecret2Bob = HASH(n, ephemeralSecretBob, longTermSecretBob, longEphemeralSecretBob)
    secretBox1Bob = AEAD_ENC(masterSecret2Bob, sig2Bob, n)
]

Bob -> Alice: secretBox1Bob

// 5. Send a message

principal Alice[
    generates m1
    sig2Alice = AEAD_DEC(masterSecret2Alice, secretBox1Bob, n)
    sig2Valid = SIGNVERIF(longTermBPub, HASH(n, sig1Alice, longTermAPub, ephemeralSecretAlice), sig2Alice)?
    secretBoxM1Alice = AEAD_ENC(masterSecret2Alice, m1, n)
]

Alice -> Bob: secretBoxM1Alice

principal Bob[
    generates m2
    m1Bob = AEAD_DEC(masterSecret2Bob, secretBoxM1Alice, n)
    secretBoxM2Bob = AEAD_ENC(masterSecret2Bob, m2, n)
]

Bob -> Alice: secretBoxM2Bob

principal Alice [
    m2Alice = AEAD_DEC(masterSecret2Alice, secretBoxM2Bob, n)
]

queries[
    confidentiality? m1
    confidentiality? m2
    confidentiality? longTermAPub
    authentication? Alice -> Bob: secretBox1Alice
    authentication? Alice -> Bob: secretBox2Alice
    authentication? Bob -> Alice: secretBox1Bob
    authentication? Alice -> Bob: secretBoxM1Alice
    authentication? Bob -> Alice: secretBoxM2Bob
]